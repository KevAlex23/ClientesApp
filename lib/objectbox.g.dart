// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'domain/models/customer.dart';
import 'domain/models/customer_phones.dart';
import 'domain/models/log.dart';
import 'domain/models/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7452155893532754365),
      name: 'Customer',
      lastPropertyId: const IdUid(7, 1602761802832693913),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1202185986692136758),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 183880289068052241),
            name: 'document',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7577184776616031286),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1582741699945871820),
            name: 'secondName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 433883085411015967),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 843260814793102117),
            name: 'secondLastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1602761802832693913),
            name: 'mainUserId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 2950744471385361833),
            relationTarget: 'MainUser')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'customerPhones', srcEntity: 'CustomerPhone', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 1276067715415605972),
      name: 'CustomerPhone',
      lastPropertyId: const IdUid(3, 8397830154757628157),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2817331907104854122),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1585758854595851277),
            name: 'phone',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8397830154757628157),
            name: 'customerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 4668157139264147383),
            relationTarget: 'Customer')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 4299669360544208846),
      name: 'Log',
      lastPropertyId: const IdUid(3, 4266056778051401776),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3095867962913000796),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7215137307291534939),
            name: 'logDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4266056778051401776),
            name: 'logDescription',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 8948483984333740856),
      name: 'MainUser',
      lastPropertyId: const IdUid(3, 6196844861816979206),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1748118620824885533),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3065505105718828965),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6196844861816979206),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 4900599383283849308),
            name: 'customers',
            targetId: const IdUid(1, 7452155893532754365))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 8948483984333740856),
      lastIndexId: const IdUid(2, 4668157139264147383),
      lastRelationId: const IdUid(1, 4900599383283849308),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Customer: EntityDefinition<Customer>(
        model: _entities[0],
        toOneRelations: (Customer object) => [object.mainUser],
        toManyRelations: (Customer object) => {
              RelInfo<CustomerPhone>.toOneBacklink(3, object.id,
                      (CustomerPhone srcObject) => srcObject.customer):
                  object.customerPhones
            },
        getId: (Customer object) => object.id,
        setId: (Customer object, int id) {
          object.id = id;
        },
        objectToFB: (Customer object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final secondNameOffset = fbb.writeString(object.secondName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final secondLastNameOffset = fbb.writeString(object.secondLastName);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.document);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, secondNameOffset);
          fbb.addOffset(4, lastNameOffset);
          fbb.addOffset(5, secondLastNameOffset);
          fbb.addInt64(6, object.mainUser.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Customer(
              document:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              secondName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              secondLastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.mainUser.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.mainUser.attach(store);
          InternalToManyAccess.setRelInfo(
              object.customerPhones,
              store,
              RelInfo<CustomerPhone>.toOneBacklink(3, object.id,
                  (CustomerPhone srcObject) => srcObject.customer),
              store.box<Customer>());
          return object;
        }),
    CustomerPhone: EntityDefinition<CustomerPhone>(
        model: _entities[1],
        toOneRelations: (CustomerPhone object) => [object.customer],
        toManyRelations: (CustomerPhone object) => {},
        getId: (CustomerPhone object) => object.id,
        setId: (CustomerPhone object, int id) {
          object.id = id;
        },
        objectToFB: (CustomerPhone object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.phone);
          fbb.addInt64(2, object.customer.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CustomerPhone(
              phone: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.customer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.customer.attach(store);
          return object;
        }),
    Log: EntityDefinition<Log>(
        model: _entities[2],
        toOneRelations: (Log object) => [],
        toManyRelations: (Log object) => {},
        getId: (Log object) => object.id,
        setId: (Log object, int id) {
          object.id = id;
        },
        objectToFB: (Log object, fb.Builder fbb) {
          final logDateOffset = fbb.writeString(object.logDate);
          final logDescriptionOffset = fbb.writeString(object.logDescription);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, logDateOffset);
          fbb.addOffset(2, logDescriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Log(
              logDate: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              logDescription: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    MainUser: EntityDefinition<MainUser>(
        model: _entities[3],
        toOneRelations: (MainUser object) => [],
        toManyRelations: (MainUser object) =>
            {RelInfo<MainUser>.toMany(1, object.id): object.customers},
        getId: (MainUser object) => object.id,
        setId: (MainUser object, int id) {
          object.id = id;
        },
        objectToFB: (MainUser object, fb.Builder fbb) {
          final emailOffset = fbb.writeString(object.email);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, emailOffset);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MainUser(
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo(object.customers, store,
              RelInfo<MainUser>.toMany(1, object.id), store.box<MainUser>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// see [Customer.id]
  static final id = QueryIntegerProperty<Customer>(_entities[0].properties[0]);

  /// see [Customer.document]
  static final document =
      QueryIntegerProperty<Customer>(_entities[0].properties[1]);

  /// see [Customer.name]
  static final name = QueryStringProperty<Customer>(_entities[0].properties[2]);

  /// see [Customer.secondName]
  static final secondName =
      QueryStringProperty<Customer>(_entities[0].properties[3]);

  /// see [Customer.lastName]
  static final lastName =
      QueryStringProperty<Customer>(_entities[0].properties[4]);

  /// see [Customer.secondLastName]
  static final secondLastName =
      QueryStringProperty<Customer>(_entities[0].properties[5]);

  /// see [Customer.mainUser]
  static final mainUser =
      QueryRelationToOne<Customer, MainUser>(_entities[0].properties[6]);
}

/// [CustomerPhone] entity fields to define ObjectBox queries.
class CustomerPhone_ {
  /// see [CustomerPhone.id]
  static final id =
      QueryIntegerProperty<CustomerPhone>(_entities[1].properties[0]);

  /// see [CustomerPhone.phone]
  static final phone =
      QueryIntegerProperty<CustomerPhone>(_entities[1].properties[1]);

  /// see [CustomerPhone.customer]
  static final customer =
      QueryRelationToOne<CustomerPhone, Customer>(_entities[1].properties[2]);
}

/// [Log] entity fields to define ObjectBox queries.
class Log_ {
  /// see [Log.id]
  static final id = QueryIntegerProperty<Log>(_entities[2].properties[0]);

  /// see [Log.logDate]
  static final logDate = QueryStringProperty<Log>(_entities[2].properties[1]);

  /// see [Log.logDescription]
  static final logDescription =
      QueryStringProperty<Log>(_entities[2].properties[2]);
}

/// [MainUser] entity fields to define ObjectBox queries.
class MainUser_ {
  /// see [MainUser.id]
  static final id = QueryIntegerProperty<MainUser>(_entities[3].properties[0]);

  /// see [MainUser.email]
  static final email =
      QueryStringProperty<MainUser>(_entities[3].properties[1]);

  /// see [MainUser.name]
  static final name = QueryStringProperty<MainUser>(_entities[3].properties[2]);

  /// see [MainUser.customers]
  static final customers =
      QueryRelationToMany<MainUser, Customer>(_entities[3].relations[0]);
}
